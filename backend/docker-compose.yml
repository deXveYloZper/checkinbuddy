# backend/docker-compose.yml  — full CheckInBuddy stack
# -----------------------------------------------------
services:
  postgres:
    image: postgis/postgis:15-3.4
    container_name: checkinbuddy_postgres
    environment:
      POSTGRES_DB:       ${DB_NAME}
      POSTGRES_USER:     ${DB_USERNAME}      # ← matches .env
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust       # dev only
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [checkinbuddy-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: checkinbuddy_redis
    ports: ["6379:6379"]
    networks: [checkinbuddy-network]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile.debian
    container_name: checkinbuddy_backend
    env_file: .env
    ports: ["3000:3000"]
    volumes:
      - ./serviceAccountKey.json:/app/serviceAccountKey.json:ro
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks: [checkinbuddy-network]
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  app_logs:

networks:
  checkinbuddy-network:
    driver: bridge
